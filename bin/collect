#!/bin/bash

rbenv local jruby-1.7.9
export JRUBY_OPTS='-J-Xmx4000m'
echo $(ruby -v)

#####
# Effect of set size on margin of error
# Effect of set size on performance

echo -e "\nVariable set size.  Constant # of agents (2000)"
sampling_factor=".0005"
for i in `seq 5 8`;
do
  set_size=$( echo "10 ^ $i" | /usr/bin/bc )
  float_sub_set_size=$( echo "$set_size * $sampling_factor" | /usr/bin/bc )
  sub_set_size=${float_sub_set_size%.*}
  float_threads=$( echo "$set_size / $sub_set_size" | /usr/bin/bc )
  threads=${float_threads%.*}
  echo -e "\nSet size ($set_size); sub set size($sub_set_size); $threads threads"
  for j in `seq 1 20`;
  do
    ruby lib/iim.rb async set_size=$set_size sub_set_size=$sub_set_size
  done
  rm spec/fixtures/$set_size.txt # Remove data set after each run
done

#####
# Effect of sampling factor on margin of error
# Effect of sampling factor on performance

# echo -e "\nVariable # of agents.  Constant set size (1,000,000)"
# for i in `seq 1 4`;
# do
#   set_size=10000
#   float_sub_set_size=$( echo "$set_size / (10 ^ $i)" | /usr/bin/bc )
#   sub_set_size=${float_sub_set_size%.*}
#   float_threads=$( echo "$set_size / $sub_set_size" | /usr/bin/bc )
#   threads=${float_threads%.*}
#   echo -e "\nSet size ($set_size); sub set size($sub_set_size); $threads threads"
#   for j in `seq 1 20`;
#   do
#     ruby lib/iim.rb async set_size=$set_size sub_set_size=$sub_set_size
#   done
#   rm spec/fixtures/$set_size.txt # Remove data set after each run
# done
