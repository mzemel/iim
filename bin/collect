#!/bin/bash

echo "MRI Ruby (thread-lock)"

#####
# Effect of set size on margin of error
# Effect of set size on performance

echo "Variable set size.  Constant sampling factor (.1)"
sampling_factor=".1"
for i in `seq 2 6`;
do
  set_size=$( echo "10 ^ $i" | /usr/bin/bc )
  float_sub_set_size=$( echo "$set_size * $sampling_factor" | /usr/bin/bc )
  sub_set_size=${float_sub_set_size%.*}
  echo "Set size ($set_size); sub set size($sub_set_size)..."
  for j in `seq 1 100`; # Take 100 samples
  do
    ruby lib/iim.rb async set_size=$set_size sub_set_size=$sub_set_size
  done
done

#####
# Effect of sampling factor on margin of error
# Effect of sampling factor on performance

# echo "Variable sampling factor.  Constant set size(1,000,000)"
# for i in `seq 1 6`;
# do
#   float_sub_set_size=$( echo "1000000 / (10 ^ $i)" | /usr/bin/bc )
#   sub_set_size=${float_sub_set_size%.*}
#   echo "Set size (1000000); sub set size($sub_set_size)..."
#   for j in `seq 1 100`; # Take 100 samples
#   do
#     ruby lib/iim.rb async set_size=$set_size sub_set_size=$sub_set_size
#   done
# done

echo "JRuby (multiple threads)"

#####
# Effect of set size on margin of error
# Effect of set size on performance

# echo "Variable set size.  Constant sampling factor (.1)"
# sampling_factor=".1"
# for i in `seq 1 3`;
# do
#   set_size=$( echo "10 ^ $i" | /usr/bin/bc )
#   float_sub_set_size=$( echo "$set_size * $sampling_factor" | /usr/bin/bc )
#   sub_set_size=${float_sub_set_size%.*}
#   echo "Set size ($set_size); sub set size($sub_set_size)..."
#   for j in `seq 1 100`; # Take 100 samples
#   do
#     ruby lib/iim.rb async set_size=$set_size sub_set_size=$sub_set_size
#   done
# done

#####
# Effect of sampling factor on margin of error
# Effect of sampling factor on performance

# echo "Variable sampling factor.  Constant set size(1,000,000)"
# for i in `seq 1 6`;
# do
#   float_sub_set_size=$( echo "1000000 / (10 ^ $i)" | /usr/bin/bc )
#   sub_set_size=${float_sub_set_size%.*}
#   echo "Set size (1000000); sub set size($sub_set_size)..."
#   for j in `seq 1 100`; # Take 100 samples
#   do
#     ruby lib/iim.rb async set_size=$set_size sub_set_size=$sub_set_size
#   done
# done